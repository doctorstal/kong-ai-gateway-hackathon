templates:
- id: stack
  run:
  - api
  - couchbase
  - init-couchbase
  - kong
  - frontend
  - polytope/redis

modules:
  - id: kong
    module: polytope/container
    args:
      image: kong/kong-gateway:3.10
      services:
        - { id: kong, ports: [{ port: 8000, protocol: http }, { port: 8443, protocol: https }] }
      mounts:
        - { path: /kong.yml, source: { type: host, path: ./conf/components/kong/dev.yml } }
      env:
        - { name: KONG_LOG_LEVEL, value: warn }
        - { name: KONG_PROXY_ACCESS_LOG, value: /dev/null }
        - { name: KONG_ROLE, value: data_plane }
        - { name: KONG_PLUGINS, value: "bundled,ai-proxy-advanced" }
        - { name: KONG_DECLARATIVE_CONFIG, value: /kong.yml }
        - { name: KONG_DATABASE, value: off }
        - { name: KONG_VITALS, value: off }
        - { name: KONG_CLUSTER_MTLS, value: pki }
        - { name: KONG_CLUSTER_CONTROL_PLANE, value: a6b7f53c23.us.cp0.konghq.com:443 }
        - { name: KONG_CLUSTER_SERVER_NAME, value: a6b7f53c23.us.cp0.konghq.com }
        - { name: KONG_CLUSTER_TELEMETRY_ENDPOINT, value: a6b7f53c23.us.tp0.konghq.com:443 }
        - { name: KONG_CLUSTER_TELEMETRY_SERVER_NAME, value: a6b7f53c23.us.tp0.konghq.com }
        - name: KONG_CLUSTER_CERT
          value: |-
            -----BEGIN CERTIFICATE-----
            MII
            xxx           
            xxx           
            xxx           
            xxx           
            xxx           
            xxx           
            xxx           
            xxx           
            xxx           
            xxx           
            xxx           
            -----END CERTIFICATE-----
        - name: KONG_CLUSTER_CERT_KEY
          value: |-
            -----BEGIN PRIVATE KEY-----
            MIG
            xxx
            xxx
            xxx
            -----END PRIVATE KEY-----
        - { name: KONG_LUA_SSL_TRUSTED_CERTIFICATE, value: system }
        - { name: KONG_KONNECT_MODE, value: on }
        - { name: KONG_CLUSTER_DP_LABELS, value: "created-by:quickstart,type:docker-macOsArmOS" }

  - id: api
    module: polytope/python
    params:
      - id: dev-mode
        info: Whether to run in dev mode (with hot reload, debugging).
        type: [default, bool, true]
    args:
      id: api
      image: public.ecr.aws/docker/library/python:3.13-slim-bookworm
      code: { type: host, path: api }
      cmd: ./bin/run
      restart:
        policy: always
      services:
        - { id: api, ports: [{protocol: http, port: 3001, expose-as: 3001}] }
      env:
        - { name: HTTP_PORT, value: 3001 }
        - { name: LOG_LEVEL, value: INFO }
        - { name: HTTP_DEBUG, value: "#pt-param dev-mode" }
        - { name: HTTP_AUTORELOAD, value: "#pt-param dev-mode" }
        - { name: OPPER_API_KEY, value: "#pt-secret opper-api-key" }
        - { name: COUCHBASE_URL, value: couchbase://couchbase }
        - { name: COUCHBASE_USERNAME, value: user }
        - { name: COUCHBASE_PASSWORD, value: password }
        - { name: COUCHBASE_BUCKET, value: main }
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache } }
        - { path: /root/conf/, source: { type: host, path: ./conf } }

  - id: frontend
    module: polytope/node
    args:
      id: frontend
      image: node:22-bullseye-slim
      code: { type: host, path: ./frontend }
      cmd: ./bin/run
      env:
        - { name: PORT, value: 3002 }
        - { name: REACT_APP_API_BASE_URL, value: "http://localhost:8000" }
        - { name: PUBLIC_URL, value: "http://localhost:8000" }
      restart:
        policy: always
      services:
        - id: frontend
          ports: [{protocol: http, port: 3002, expose-as: 3002}]
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}
        - { path: /root/.npm/, source: { type: volume, scope: project, id: npm-cache }}
        - { path: /app/node_modules/, source: { type: volume, scope: project, id: npm-modules }}

  - id: init-couchbase
    params:
    module: polytope/python
    args:
      image: gcr.io/arched-inkwell-420116/python:3.11.8-slim-bookworm
      id: init-couchbase
      code: { type: host, path: ./util/init-couchbase }
      cmd: ./bin/run
      restart: { policy: on-failure }
      env:
        - { name: COUCHBASE_HOST, value: couchbase }
        - { name: COUCHBASE_USERNAME, value: user }
        - { name: COUCHBASE_PASSWORD, value: password }
        - { name: COUCHBASE_MAIN_BUCKET_NAME, value: main }
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}
        - { path: /root/conf/, source: { type: host, path: ./conf/components/couchbase }}

  - id: couchbase
    module: polytope/couchbase
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      data-volume: { type: volume, scope: project, id: couchbase-data }
